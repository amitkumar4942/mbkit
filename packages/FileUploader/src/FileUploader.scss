@import '~@mbkit/theme/dist/theme.scss';


// Targets fill of all SVG elements that have a fill attribute that contains a pound symbol
@mixin svgFill($fillColor) {
    svg g:not([fill~="#"]),
    svg path:not([fill~="#"]),
    svg mask:not([fill~="#"]),
    svg use:not([fill~="#"]) { 
        fill: $fillColor;
    }
}
/*
* Exposes `loader` class name to be applied to an element
*/ 
@mixin loader($color, $background) {
    $loadingSpeed: 650;
    .loader {
        &,
        &:before,
        &:after {
            border-radius: 50%;
        }
        
        color: $color;
        font-size: 4px;
        text-indent: -999px;
        width: 18px;
        height: 18px;
        box-shadow: inset 0 0 0 1px;
        transform: translate3d(-50%, -50%, 0) rotate(180deg);
        position: absolute;
        top: 50%;
        left: 50%;

        
        &:before,
        &:after {
            position: absolute;
            content: '';  
            width: 12px;
            height: 20px;
            background: $background;
            top: -1px;
        }
        
        &:before {
            border-radius: 20px 0 0 20px;  
            left: -1px;
            transform-origin: 11px 11px;
            animation: spin #{$loadingSpeed}ms infinite ease #{$loadingSpeed * .75}ms;
        }
        &:after {
            border-radius: 0 20px 20px 0;
            left: 9px;
            transform-origin: 0px 9px;
            animation: spin #{$loadingSpeed}ms infinite ease;    
        }
    }
        
    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
}

.fileUploader {
    border-radius: $radius;
    display: flex;
    justify-content: space-between;
    font-family: $font-family;
    transition: all .2s ease-out;
    position: relative;

    &, & * {
        box-sizing: border-box;
    }

    .input {
        cursor: pointer;
        opacity: 0;
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }
    .placeholder {
        color: $neutral-darker;
        @include svgFill($neutral-darker);
    }
    .value {
        color: $foreground;
        @include svgFill($foreground);
    }
    .displayText {
        line-height: 1.4;
        border-radius: $radius 0 0 $radius;
        border-top: 1px solid $neutral-light;
        border-left: 1px solid $neutral-light;
        border-bottom: 1px solid $neutral-light;
        flex: 1;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        background: $background;
        padding: 10px;
    }
    &.isDragging {
        .displayText {
            border-style: dashed;
            border-right: none;
        }
    }

    .largeDrop {
        position: absolute;
        top: 0;
        left: 0;
        height: 500px;
        width: 100%;        
    }

    .button {
        line-height: 1.4;
        position: relative;
        transition: all .2s ease-out;
        flex: 0 1 auto;
        border: 1px solid transparent;
        border-radius: 0 $radius $radius 0;
        color: $neutral-lightest;
        padding: 10px 16px;

        &.isLoading {
            pointer-events: none;
        }
    }
    @mixin buttonColor($bg, $fg, $border) {
        background: $bg;
        color: $fg;
        border-color: $border;
        @include svgFill($fg);

        &.isLoading {
            color: transparent;
        }
    }
    &:not(.disabled) .button.variant {
        &primary {
            @include buttonColor($primary-base, $primary-foreground, $primary-base);
            @include loader($primary-foreground, $primary-base);
        }
        &secondary {
            @include buttonColor($secondary-base, $secondary-foreground, $secondary-base);
            @include loader($secondary-foreground, $secondary-base);
        }
        &primaryOutlined {
            @include buttonColor($background, $foreground, $primary-base);
            @include loader($primary-base, $primary-foreground);
        }
        &secondaryOutlined {
            @include buttonColor($secondary-foreground, $foreground, $secondary-base);
            @include loader($secondary-base, $secondary-foreground);
        }
    }
    &:not(.isLoading):not(.disabled):hover .button.variant {
        &primary {
            @include buttonColor($background, $foreground, $primary-base);
        }
        &secondary {
            @include buttonColor($background, $foreground, $secondary-base);
        }
        &primaryOutlined {
            @include buttonColor($primary-base, $primary-foreground, $primary-base);
        }
        &secondaryOutlined {
            @include buttonColor($secondary-base, $secondary-foreground, $secondary-base);
        }
    }
    &.isLoading {
        .input {
            cursor: wait;
        }
    }
    &.invalid {
        .displayText,
        .button {
            border-color: $error-base !important;
        }
    }
    &.disabled {
        .input {
            cursor: not-allowed;
        }

        .displayText {
            background: $neutral-light; 
            color: $neutral-dark;
            border-color: $neutral-light;
            @include svgFill($neutral-dark);
        }
        .button {
            @include buttonColor($neutral-dark, $neutral-light, $neutral-dark);
            @include loader($neutral-dark, $neutral-light);
        }
    }
    &:focus {
        outline: none;
        box-shadow: 0 0 0 4px $focus;
    }
    &:active {
        box-shadow: 0 0 0 8px $focus;
    }
}